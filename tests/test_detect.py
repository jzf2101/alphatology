import pytest
from detect import ConceptDetector, detect_bridge
from templates.util import transpose_board
from boardlaw_utils import from_string


@pytest.mark.parametrize(
    "board_str",
    [
        # basic bridge
        """w........
    .........
    .........
    .........
    ...b.....
    .........
    ..b......
    .........
    w........""",
        # imo, still a bridge. white can play to either
        # side and black can still connect.
        """w........
    .........
    .........
    .....b...
    ...b.b...
    .........
    .........
    .........
    w.......w""",
        # all possible bridge formations
        """.........
    .........
    ...b.....
    .b..b..w.
    ..b.....w
    b..b.....
    .b.......
    ......ww.
    .....www.""",
        """.........
    .........
    .........
    .....w...
    ...w.b...
    .........
    .........
    .........
    ........b""",
    ],
)
def test_detect_bridge_1(board_str):
    # test as given colors
    board = from_string(board_str)
    assert detect_bridge(board)

    bd = ConceptDetector("bridge")
    assert bd(board)

    # # test as swapped colors
    # board = from_string(transpose_board(board_str))
    # assert detect_bridge(board)

    # assert bd(board)


@pytest.mark.parametrize(
    "board_str",
    [
        # directly across pieces don't form a bridge.
        """w........
    .........
    .........
    .........
    ...b.b...
    .........
    .........
    .........
    w........""",
        # white closes the bridge.
        """w........
    .........
    .........
    ....wb...
    ...b.b...
    .........
    .........
    .........
    w........""",
        # diagonal pieces don't form a bridge.
        """w........
    .........
    .........
    ....wb...
    ...b.b...
    ..b......
    .........
    .........
    w.......w""",
        """.....w..b
........b
.......b.
......b..
....wb.ww
....b....
.w.wb.b..
......bw.
.....wbw.""",
    ],
)
def test_detect_bridge_2(board_str):
    # test as given colors
    board = from_string(board_str)
    assert not detect_bridge(board)

    bd = ConceptDetector("bridge")
    assert not bd(board)


@pytest.mark.parametrize(
    "board_str",
    [
        """.........
.........
.........
.........
.....bb..
.........
....b.b..
.........
.....wwww""",
        """.........
.........
.........
.........
.....bbb.
.........
....b.b..
.........
.....wwww""",
        """.....w..b
........b
.......b.
......b..
....wbbww
...w.....
.w.wb.b..
......bw.
.....wbw.""",
    ],
)
def test_detect_trapezoid_yes(board_str):
    # test as given colors
    board = from_string(board_str)
    bd = ConceptDetector("trapezoid")
    assert bd(board)


@pytest.mark.parametrize(
    "board_str",
    [
        """.....w..b
........b
.......b.
......b..
....wbbww
...w..w..
.w.wbbb..
......bw.
.....wbw."""
    ],
)
def test_detect_trapezoid_no(board_str):
    # test as given colors
    board = from_string(board_str)
    bd = ConceptDetector("trapezoid")
    assert not bd(board)
